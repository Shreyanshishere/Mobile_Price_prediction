# -*- coding: utf-8 -*-
"""Mobile price prediction project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nskZoRibbkSovGIxSjWaZAxGtquT_32Z
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as se
import pandas as pd

df=pd.read_csv('/content/MobileDataset.csv')

df.shape

df.info

df.describe() # statistical data of data 836 rows ratings 805 therefore null also present

df.isna().sum() # used to check null data

df['Ratings']=df['Ratings'].fillna(df['Ratings'].mean())
df["RAM"]=df["RAM"].fillna(df["RAM"].mean())
df["ROM"]=df["ROM"].fillna(df["ROM"].mean())
df["Selfi_Cam"]=df["Selfi_Cam"].fillna(df["Selfi_Cam"].mean())
df["Mobile_Size"]=df["Mobile_Size"].fillna(df["Mobile_Size"].mean())

df.columns

df.drop('Brand me',axis=1,inplace=True)

df.RAM=df.RAM.astype('int64') # used to converet ram rom and selfi cam data to int ger type but mobile size is not converted beacuse it comes in 
 #float data

df.ROM=df.ROM.astype("int64")

df.Selfi_Cam=df.Selfi_Cam.astype('int64')

df.info()

corr=df.corr()

se.set(rc={'figure.figsize':(15,8)}) # to set the figure size

plt.figure(figsize=(14,14)) # to plot the figure using matplotlib

se.heatmap(corr,cbar=False,square=True,fmt='.2%',annot=True) # to plot the heat map using attributes

x=df.iloc[:,2:8].values # iloc colon seh pehle saari rows ko le liyaa aur 2 seh 8 coloumns tak values sehh array meh convert kar diyaa

y=df.iloc[:,-1].values # last columns ko le lenge

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=10)

from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier(n_estimators=15,random_state=0)

rfc.fit(xtrain,ytrain)

rfc.score(xtrain,ytrain)

rfc.score(xtest,ytest)

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor(random_state=42)
dtr.fit(xtrain,ytrain)

dtr.score(xtrain,ytrain)

dtr.score(xtest,ytest)

import pickle
pickle.dump(dtr,open('model.pkl','wb'))

model=pickle.load(open("model.pkl",'rb'))

final=np.array([4,128,6.3,64,28,5000])
prediction=model.predict(final.reshape(1,-1))
prediction[0]

